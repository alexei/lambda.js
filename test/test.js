var assert = require("assert"),
    collectionjs = require("../src/lambda.js"),
    L = collectionjs.L

describe("collectionjs", function() {
    it("should return the type of the argument", function() {
        assert.equal("Arguments", L.type(arguments))
        assert.equal("Array", L.type([]))
        assert.equal("Boolean", L.type(true))
        assert.equal("Date", L.type(new Date))
        assert.equal("Function", L.type(function() {}))
        assert.equal("Number", L.type(1))
        assert.equal("Null", L.type(null))
        assert.equal("Object", L.type({}))
        assert.equal("RegExp", L.type(/^/))
        assert.equal("String", L.type(""))
        assert.equal("Undefined", L.type(undefined))

        assert.equal(true, L.isArguments(arguments))
        assert.equal(true, L.isArray([]))
        assert.equal(true, L.isBoolean(false))
        assert.equal(true, L.isDate(new Date))
        assert.equal(true, L.isFunction(function() {}))
        assert.equal(true, L.isNumber(1))
        assert.equal(true, L.isNull(null))
        assert.equal(true, L.isObject({}))
        assert.equal(true, L.isRegExp(/^/))
        assert.equal(true, L.isString(""))
        assert.equal(true, L.isUndefined(undefined))

        assert.equal(true, L.isNumeric("1"))
        assert.equal(false, L.isNumeric("a"))

        assert.equal(true, L.isScalar(false))
        assert.equal(true, L.isScalar(1))
        assert.equal(true, L.isScalar("a"))
        assert.equal(false, L.isScalar(arguments))
        assert.equal(false, L.isScalar([]))
        assert.equal(false, L.isScalar(new Date()))
        assert.equal(false, L.isScalar({}))
        assert.equal(false, L.isScalar(/^/))
        assert.equal(false, L.isScalar(null))
        assert.equal(false, L.isScalar(undefined))

        assert.equal(true, L.isCompound(arguments))
        assert.equal(true, L.isCompound([]))
        assert.equal(true, L.isCompound(new Date()))
        assert.equal(true, L.isCompound({}))
        assert.equal(true, L.isCompound(/^/))
        assert.equal(false, L.isCompound(true))
        assert.equal(false, L.isCompound(1))
        assert.equal(false, L.isCompound("a"))
        assert.equal(false, L.isCompound(null))
        assert.equal(false, L.isCompound(undefined))
    })
})
